apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"
    def currentVersionCode = getVersionCode()
    defaultConfig {
        applicationId "com.example.zew.demo2"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode currentVersionCode
        versionName "1.0"
    }

    //配置签名信息
    signingConfigs {
        debug {
            keyAlias 'DEBUG'
            keyPassword '123456'
            storeFile file('../keystore/debug/debug.jks')
            storePassword '123456'
        }
        release {
            storeFile file('../keystore/release/yuLocal.jks')
            storePassword "deppon"
            keyAlias "ent"
            keyPassword "www.deppon.com"
        }
    }

    lintOptions {
        disable 'InvalidPackage','TypographyFractions','TypographyQuotes'
        checkReleaseBuilds false //设置在release版本的时候也关闭错误
        abortOnError false  //设置是否在lint发生错误时终止构建为false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    //修改后缀名把版本号添加上
    android.applicationVariants.all { variant ->
        def file = variant.outputs[0].outputFile
        variant.outputs[0].outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + "-" + defaultConfig.versionCode + ".apk"))
    }

}
def getVersionCode() {
    def versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.number'].toInteger()
        println('Current version code is ' + versionCode.toString())
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}
assembleRelease {}.doLast {
    updateVersionCode()
}

def updateVersionCode() {
    def runTasks = gradle.startParameter.taskNames

    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {
        return
    }

    def File versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def currentVersionCode = versionProps['build.number'].toInteger()
        currentVersionCode++
        versionProps['build.number'] = currentVersionCode.toString()
        versionProps.store(versionFile.newWriter(), null)
        println('Updated version code to ' + currentVersionCode.toString())
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}
dependencies {
    compile 'me.drakeet.multitype:multitype:2.2.2'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.0.0'
}
